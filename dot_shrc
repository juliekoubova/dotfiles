#!/bin/sh

if uname -r | grep -q microsoft; then
  julie_fix_wsl_interop() {
    if ! test -e ${WSL_INTEROP}; then
      _pid="${PPID}"

      while test -n "${_pid}"; do 
        if test -e "/run/WSL/${_pid}_interop"; then
          export WSL_INTEROP="/run/WSL/${_pid}_interop"
          break
        fi
        _pid=$(awk '$1 == "PPid:" { print $2 }' "/proc/${_pid}/status")
      done
    fi
  }
  julie_fix_wsl_interop
fi

has() {
  command -v $1 > /dev/null
}

source_if_has() {
  [ -s "${1}" ] && . "${1}"
}

set -o vi

export PATH="${HOME}/.local/bin${PATH:+:${PATH}}"
export HISTSIZE=1000
export SAVEHIST=1000

if has starship; then
  case "${TTY}" in
    /dev/tty[0-9])
      export STARSHIP_CONFIG="${XDG_CONFIG_HOME}/starship_tty.toml"
      ;;
  esac
fi

if has doas && ! has sudo; then
  alias sudo=doas
elif has sudo && ! has doas; then
  alias doas=sudo
fi

if has nvim; then
  alias vim=nvim
  export MANPAGER='nvim +Man!'
  export EDITOR=nvim
elif has vim; then
  alias nvim=vim
  export EDITOR=vim
elif has vi; then
  alias nvim=vi
  alias vim=vi
  export EDITOR=vi
fi

if has eza; then
  alias ls='eza'
  alias ll='eza -lg --git'
  alias la='eza -lag --git'
  alias tree='eza -Tlag --git'
elif has exa; then
  alias ls='exa'
  alias ll='exa -lg --git'
  alias la='exa -lag --git'
  alias tree='exa -Tlag --git'
else
  alias ll='ls -l'
  alias la='ls -la'
fi

. "${HOME}/.aliases"

[ -r "${HOME}/.cargo/env" ] && . "${HOME}/.cargo/env"

if has swayidle && has zzz && has swayzzz; then
  alias zzz=swayzzz
fi

if [ `id -u` != 0 ] && has doas; then
  alias poweroff='doas poweroff'
  alias reboot='doas reboot'
fi

if has apk; then
  whichapk() {
    if [ -f "${1}" ]; then 
      file="${1}"
    else
      file=`which "${1}"`
    fi
    apk info -W "${file}"
  }

  upgradeable=`apk list --upgradeable | wc -l`
  [ "${upgradeable}" -gt 0 ] && printf "There are ${upgradeable} upgradeable apk packages.\n" 
  unset upgradeable
fi

if has brew; then
  eval "$(brew shellenv)"
  source_if_has "${HOMEBREW_PREFIX}/opt/nvm/nvm.sh" 
fi

catwhich() {
  file=`which "${1}"` || return 1
  cat "${file}"
}
