#!/bin/sh

if uname -r | grep -q microsoft; then
  julie_fix_wsl_interop() {
    if ! test -e ${WSL_INTEROP}; then
      _pid="${PPID}"

      while test -n "${_pid}"; do 
        if test -e "/run/WSL/${_pid}_interop"; then
          export WSL_INTEROP="/run/WSL/${_pid}_interop"
          break
        fi
        _pid=$(awk '$1 == "PPid:" { print $2 }' "/proc/${_pid}/status")
      done
    fi
  }
  julie_fix_wsl_interop
fi

has() {
  command -v $1 > /dev/null
}

source_if_has() {
  [ -s "${1}" ] && . "${1}"
}

set -o vi

export PATH="${HOME}/.local/bin${PATH:+:${PATH}}"
export HISTSIZE=1000
export SAVEHIST=1000

export BC_ENV_ARGS="${XDG_CONFIG_HOME}/bc"
export LESS="--mouse"

if has starship; then
  case "${TTY}" in
    /dev/tty[0-9])
      export STARSHIP_CONFIG="${XDG_CONFIG_HOME}/starship_tty.toml"
      ;;
  esac
fi

if has doas && ! has sudo; then
  alias sudo=doas
elif has sudo && ! has doas; then
  alias doas=sudo
fi

if has nvim; then
  alias vim=nvim
  export MANPAGER='nvim +Man!'
  export MANWIDTH=100
  export EDITOR=nvim
elif has vim; then
  alias nvim=vim
  export EDITOR=vim
elif has vi; then
  alias nvim=vi
  alias vim=vi
  export EDITOR=vi
fi

if has eza; then
  alias ls='eza'
  alias ll='eza -lg --git'
  alias la='eza -lag --git'
  alias tree='eza -Tlag --git'
elif has exa; then
  alias ls='exa'
  alias ll='exa -lg --git'
  alias la='exa -lag --git'
  alias tree='exa -Tlag --git'
else
  alias ll='ls -l'
  alias la='ls -la'
fi

if has loginctl; then
  alias zzz='loginctl suspend'
  alias reboot='loginctl reboot'
  alias poweroff='loginctl poweroff'
elif [ `id -u` != 0 ] && has doas; then
  alias poweroff='doas poweroff'
  alias reboot='doas reboot'
fi

. "${HOME}/.aliases"

[ -r "${HOME}/.cargo/env" ] && . "${HOME}/.cargo/env"

if has apk; then
  whichapk() {
    if [ -f "${1}" ]; then 
      file="${1}"
    else
      file=`which "${1}"`
    fi
    apk info -W "${file}"
  }

  upgradeable=`apk list --upgradeable | wc -l`
  [ "${upgradeable}" -gt 0 ] && printf "There are ${upgradeable} upgradeable apk packages.\n" 
  unset upgradeable
fi

if has brew; then
  eval "$(brew shellenv)"
  source_if_has "${HOMEBREW_PREFIX}/opt/nvm/nvm.sh"
elif [ `uname` = "Linux" ]; then
  export NVM_DIR="${XDG_CONFIG_HOME}/nvm"
  source_if_has "${NVM_DIR}/nvm.sh"
fi

if [ -n "$WAYLAND_DISPLAY" ] && has wl-copy && has wl-paste; then
  clip() {
    if [ -t 0 ]; then # stdin is TTY, we have no input
      wl-paste
    else
      cat | wl-copy
    fi
  }
elif has pbcopy && has pbpaste; then
  clip() {
    if [ -t 0 ]; then # stdin is TTY, we have no input
      pbpaste
    else
      cat | pbcopy
    fi
  }
fi

ii() {
  if [ `uname` = "Darwin" ]; then
    open "$@"
    return
  fi
  if [ -d "$1" ] && has thunar; then
    thunar "$@"
    return
  fi
  if has xdg-open; then
    xdg-open "$@" >/dev/null 2>&1 &
    return
  fi
  echo >&2 "don't know how to ii"
  return 1
}

catwhich() {
  file=`which "${1}"` || return 1
  cat "${file}"
}

invoke_git_ignore_input_error() {
  local output # need to declare local first to capture exit code
  output=$(git "$@" 2>&1)
  if [ $? -eq 0 ]; then
    return 0
  fi
  if echo "$output" | grep -Eq '^error: pathspec'; then
    echo "$output"
    return 2
  fi
  echo "$output" >&2
  return 1
}

select_git_branch() {
  if ! has fzf; then
    echo "fzf not available" >&2
    return 1
  fi
  git for-each-ref refs/heads \
    --sort=-committerdate \
    --format='%(refname:short)' \
    | fzf ${1:+-q "$1"} | awk '{$1=$1};1'
}

select_git_commit() {
  if ! has fzf; then
    echo "fzf not available" >&2
    return 1
  fi
  PAGER= git log \
    --color \
    --max-count=200 \
    | fzf --ansi ${1:+-q "$1"} | awk '{print $1}'
}

git_reset() {
  case "$1" in
    --soft|--hard)
      local type="$1"
      shift
      ;;
  esac
  local commit="$1"
  if [ -z "${commit}" ]; then
    commit=$(select_git_commit)
  fi
  while [ -n "${commit}" ]; do
    if git reset $type "${commit}"; then
      commit=
    else
      commit="$(select_git_commit "${commit}")"
    fi
  done
}

ga() {
  local arg="${1:---all}"
  git add $arg "$@"
}

gcm() {
  git commit -m "$*"
}

gacm() {
  git add --all && git commit -m "$*"
}

gacmp() {
  git add --all && git commit -m "$*" && git push
}

gcmp() {
  git commit -m "$*" && git push
}

gco() {
  if [ -n "$1" ]; then
    invoke_git_ignore_input_error checkout "$1"
    case $? in [01]) return $?;; esac
  fi
  git checkout `select_git_branch "${1}"`
}

alias gres='git_reset'
alias ghard='git_reset --hard'
alias gsoft='git_reset --soft'
alias lg=lazygit
